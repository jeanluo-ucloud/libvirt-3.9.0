%define ucloud 1

%define rhev 1

%define rpmversion %%RPMVERSION%%
%define pkgrelease %%PKGRELEASE%%

# allow pkg_release to have configurable %{dist} tag
%define specrelease %%SPECRELEASE%%

%define pkg_release %{specrelease}%{?buildid}

# The tarball/base version
%define tarball %{rpmversion}-%{pkgrelease}

%global SLOF_gittagdate 20170303
%global SLOF_gittagcommit 66d250e

%global have_usbredir 1
%global have_spice    1
%global have_fdt      0
%global have_gluster  1
%global have_kvm_setup 0
%global have_seccomp 1
%global have_memlock_limits 0
%global have_vxhs     0
%global have_vtd      0
%global have_live_block_ops 1
%global have_vhost_user 1

%ifnarch %{ix86} x86_64
    %global have_usbredir 0
%endif

%ifnarch s390 s390x
    %global have_librdma 1
    %global have_tcmalloc 1
%else
    %global have_librdma 0
    %global have_tcmalloc 0
%endif

%ifarch %{ix86}
    %global kvm_target    i386
%endif
%ifarch x86_64
    %global kvm_target    x86_64
    %global have_vxhs    1
%else
    %global have_spice   0
    %global have_gluster 0
%endif
%ifarch %{power64}
    %global kvm_target    ppc64
    %global have_fdt     1
    %global have_kvm_setup 1
    %global have_memlock_limits 1
%endif
%ifarch s390x s390
    %global kvm_target    s390x
%endif
%ifarch ppc
    %global kvm_target    ppc
    %global have_fdt     1
%endif
%ifarch aarch64
    %global kvm_target    aarch64
    %global have_fdt     1
%endif

#Versions of various parts:

%define pkgname qemu-kvm
%define rhel_ma_suffix -ma
%define rhel_suffix -rhel
%define rhev_suffix -rhev

# Setup for RHEL/RHEV package handling
# We need to define tree suffixes:
# - pkgsuffix:             used for package name
# - extra_provides_suffix: used for dependency checking of other packages
# - conflicts_suffix:      used to prevent installation of both RHEL and RHEV

%if %{rhev}
    %global pkgsuffix -ev
    %global extra_provides_suffix %{nil}
    %global rhev_provide_suffix %{rhev_suffix}
    %global conflicts_suffix %{rhel_suffix}
    %global obsoletes_version 15:0-0
    %global obsoletes_version2 15:0-0
    %global have_vtd 1
%else
    %global pkgsuffix %{rhel_ma_suffix}
    %global extra_provides_suffix %{nil}
    %global extra_provides_suffix2 %{rhel_suffix}
    %global conflicts_suffix %{rhev_suffix}
    %global conflicts_suffix2 %{rhel_suffix}
    %global have_live_block_ops 0
    %global have_vhost_user 0
    %global obsoletes_version 15:0-0
%endif

# Override rhev
%if %{ucloud}
    %global pkgsuffix %{nil}
    %global extra_provides_suffix %{nil}
    %global rhev_provide_suffix %{rhev_suffix}
    %global conflicts_suffix %{rhel_suffix}
    %global obsoletes_version 15:0-0
    %global obsoletes_version2 15:0-0
    %global have_vtd 1
    %global have_spice 0
    %global have_librdma 0
    %global have_usbredir 0
    %global have_seccomp 0
    %global have_gluster 0
    %global have_vxhs 0
%endif

# Macro to properly setup RHEL/RHEV conflict handling
%define rhel_rhev_conflicts()                                          \
Conflicts: %1%{conflicts_suffix}                                       \
Provides: %1%{extra_provides_suffix} = %{epoch}:%{version}-%{release}  \
%if 0%{?extra_provides_suffix2:1}                                      \
Provides: %1%{extra_provides_suffix2} = %{epoch}:%{version}-%{release} \
%endif                                                                 \
%if 0%{?conflicts_suffix2:1}                                           \
Conflicts: %1%{conflicts_suffix2}                                      \
%endif                                                                 \
%if 0%{?obsoletes_version:1}                                           \
Obsoletes: %1 < %{obsoletes_version}                                   \
%endif                                                                 \
%if 0%{?obsoletes_version2:1}                                          \
Obsoletes: %1%{rhel_ma_suffix} < %{obsoletes_version2}                 \
%endif                                                                 \
%if 0%{?rhev_provide_suffix:1}                                         \
Provides: %1%{rhev_provide_suffix} = %{epoch}:%{version}-%{release}    \
Obsoletes: %1%{rhev_provide_suffix} < %{epoch}:%{version}-%{release}   \
%endif

Summary: QEMU is a machine emulator and virtualizer
Name: %{pkgname}%{?pkgsuffix}
Version: %{rpmversion}
Release: %{pkg_release}
# Epoch because we pushed a qemu-1.0 package. AIUI this can't ever be dropped
Epoch: 10
License: GPLv2+ and LGPLv2+ and BSD
Group: Development/Tools
URL: http://www.qemu.org/
%if %{rhev}
ExclusiveArch: x86_64 %{power64} aarch64 s390x
%else
ExclusiveArch: %{power64} aarch64 s390x
%endif
%ifarch %{ix86} x86_64
Requires: seabios-bin >= 1.10.2-1
Requires: sgabios-bin
%endif
%ifnarch aarch64 s390x
Requires: seavgabios-bin >= 1.10.2-1
Requires: ipxe-roms-qemu >= 20170123-1
%endif
%ifarch %{power64}
Requires: SLOF >= %{SLOF_gittagdate}-1.git%{SLOF_gittagcommit}
%endif
Requires: %{pkgname}-common%{?pkgsuffix} = %{epoch}:%{version}-%{release}
%if %{have_seccomp}
Requires: libseccomp >= 2.3.0
%endif
# For compressed guest memory dumps
Requires: lzo snappy
%if %{have_gluster}
Requires: glusterfs-api >= 3.6.0
%endif
%if %{have_kvm_setup}
Requires(post): systemd-units
    %ifarch %{power64}
Requires: powerpc-utils
    %endif
%endif
%if 0%{?ucloud:0}
Requires: libusbx >= 1.0.19
%endif
Requires: nettle
%if %{have_usbredir}
Requires: usbredir >= 0.7.1
%endif


# OOM killer breaks builds with parallel make on s390(x)
%ifarch s390 s390x
    %define _smp_mflags %{nil}
%endif

Source0: qemu-kvm-%{rpmversion}-%{pkgrelease}.tar.xz

# Creates /dev/kvm
Source3: 80-kvm.rules
# KSM control scripts
Source4: ksm.service
Source5: ksm.sysconfig
Source6: ksmctl.c
Source7: ksmtuned.service
Source8: ksmtuned
Source9: ksmtuned.conf
Source10: qemu-guest-agent.service
Source11: 99-qemu-guest-agent.rules
Source12: bridge.conf
Source13: qemu-ga.sysconfig
Source14: rhel6-virtio.rom
Source15: rhel6-pcnet.rom
Source16: rhel6-rtl8139.rom
Source17: rhel6-ne2k_pci.rom
Source18: bios-256k.bin
Source19: README.rhel6-gpxe-source
Source20: rhel6-e1000.rom
Source21: kvm-setup
Source22: kvm-setup.service
Source23: 85-kvm.preset
Source24: build_configure.sh
Source25: kvm-unit-tests.git-4ea7633.tar.bz2
Source26: vhost.conf
Source27: kvm.conf
Source28: 95-kvm-memlock.conf
Source29: pxe-e1000e.rom
Source30: kvm-s390x.conf
Source31: kvm-x86.conf
Source32: qemu-pr-helper.service
Source33: qemu-pr-helper.socket
Source34: kvm.modules

BuildRequires: zlib-devel
BuildRequires: glib2-devel
BuildRequires: which
BuildRequires: openssl-devel
BuildRequires: cyrus-sasl-devel
BuildRequires: libtool
BuildRequires: libaio-devel
BuildRequires: rsync
BuildRequires: python
BuildRequires: pciutils-devel
BuildRequires: ncurses-devel
BuildRequires: libattr-devel
%if 0%{?ucloud:0}
BuildRequires: libusbx-devel >= 1.0.19
BuildRequires: libiscsi-devel
%endif
BuildRequires: nettle-devel
%if %{have_usbredir}
BuildRequires: usbredir-devel >= 0.7.1
%endif
BuildRequires: texinfo
%if %{have_spice}
BuildRequires: spice-protocol >= 0.12.12
BuildRequires: spice-server-devel >= 0.12.8
BuildRequires: libcacard-devel
# For smartcard NSS support
BuildRequires: nss-devel
%endif
%if %{have_seccomp}
BuildRequires: libseccomp-devel >= 2.3.0
%endif

%if 0%{?ucloud:0}
# For network block driver
BuildRequires: libcurl-devel
BuildRequires: libssh2-devel
%ifarch x86_64
BuildRequires: librados2-devel
BuildRequires: librbd1-devel
%endif
%if %{have_gluster}
# For gluster block driver
BuildRequires: glusterfs-api-devel >= 3.6.0
BuildRequires: glusterfs-devel
%endif
%endif
# We need both because the 'stap' binary is probed for by configure
BuildRequires: systemtap
BuildRequires: systemtap-sdt-devel
# For XFS discard support in raw-posix.c
# For VNC JPEG support
BuildRequires: libjpeg-devel
# For VNC PNG support
BuildRequires: libpng-devel
# For uuid generation
BuildRequires: libuuid-devel

%if 0%{?ucloud:0}
# For BlueZ device support
BuildRequires: bluez-libs-devel
# For Braille device support
BuildRequires: brlapi-devel
# qemu-pr-helper multipath support (requires libudev too)
BuildRequires: device-mapper-multipath-devel
BuildRequires: systemd-devel
%endif

# For test suite
BuildRequires: check-devel
# For virtfs
BuildRequires: libcap-devel
# Hard requirement for version >= 1.3
BuildRequires: pixman-devel
# Documentation requirement
#BuildRequires: perl-podlators
BuildRequires: texinfo
## For rdma
#%if 0%{?have_librdma}
#BuildRequires: rdma-core-devel
#%endif
%if 0%{?have_tcmalloc}
BuildRequires: gperftools-devel
%endif
%if %{have_fdt}
BuildRequires: libfdt-devel >= 1.4.3
%endif
# iasl and cpp for acpi generation (not a hard requirement as we can use
# pre-compiled files, but it's better to use this)
%ifarch %{ix86} x86_64
BuildRequires: iasl
BuildRequires: cpp
%endif
# For compressed guest memory dumps
BuildRequires: lzo-devel snappy-devel
# For NUMA memory binding
%ifnarch s390x
BuildRequires: numactl-devel
%endif
BuildRequires: libgcrypt-devel
# used by qemu-bridge-helper and qemu-pr-helper
BuildRequires: libcap-ng-devel

# For kvm-unit-tests
%ifarch x86_64
BuildRequires: binutils
BuildRequires: kernel-devel
%endif

BuildRequires: diffutils

# For s390-pgste flag
%ifarch s390x
BuildRequires: binutils >= 2.27-16
%endif

%if 0%{?el6}
BuildRequires: libudev-devel
%endif

Requires: qemu-img%{?pkgsuffix} = %{epoch}:%{version}-%{release}

# RHEV-specific changes:
# We provide special suffix for qemu-kvm so the conflit is easy
# In addition, RHEV version should obsolete all RHEL version in case both
# RHEL and RHEV channels are used
%rhel_rhev_conflicts qemu-kvm


%define qemudocdir %{_docdir}/%{pkgname}

%description
qemu-kvm%{?pkgsuffix} is an open source virtualizer that provides hardware
emulation for the KVM hypervisor. qemu-kvm%{?pkgsuffix} acts as a virtual
machine monitor together with the KVM kernel modules, and emulates the
hardware for a full system such as a PC and its associated peripherals.

%package -n qemu-img%{?pkgsuffix}
Summary: QEMU command line tool for manipulating disk images
Group: Development/Tools

%rhel_rhev_conflicts qemu-img

%description -n qemu-img%{?pkgsuffix}
This package provides a command line tool for manipulating disk images.

%package -n qemu-kvm-common%{?pkgsuffix}
Summary: QEMU common files needed by all QEMU targets
Group: Development/Tools
Requires(post): /usr/bin/getent
Requires(post): /usr/sbin/groupadd
Requires(post): /usr/sbin/useradd
%if 0%{?el7}
Requires(post): systemd-units
Requires(preun): systemd-units
Requires(postun): systemd-units
%endif

%rhel_rhev_conflicts qemu-kvm-common

%description -n qemu-kvm-common%{?pkgsuffix}
qemu-kvm is an open source virtualizer that provides hardware emulation for
the KVM hypervisor.

This package provides documentation and auxiliary programs used with qemu-kvm.

%package -n qemu-kvm-tools%{?pkgsuffix}
Summary: KVM debugging and diagnostics tools
Group: Development/Tools

%rhel_rhev_conflicts qemu-kvm-tools

%description -n qemu-kvm-tools%{?pkgsuffix}
This package contains some diagnostics and debugging tools for KVM, such as kvm_stat.

%prep
%setup -q -n qemu-kvm-%{tarball}

# Copy bios files to allow 'make check' pass
cp %{SOURCE14} pc-bios
cp %{SOURCE15} pc-bios
cp %{SOURCE16} pc-bios
cp %{SOURCE17} pc-bios
cp %{SOURCE18} pc-bios
cp %{SOURCE20} pc-bios
cp %{SOURCE29} pc-bios

# if patch fuzzy patch applying will be forbidden
%define with_fuzzy_patches 0
%if %{with_fuzzy_patches}
    patch_command='patch -p1 -s'
%else
    patch_command='patch -p1 -F1 -s'
%endif
ApplyPatch()
{
  local patch=$1
  shift
  if [ ! -f $RPM_SOURCE_DIR/$patch ]; then
    exit 1
  fi
  case "$patch" in
  *.bz2) bunzip2 < "$RPM_SOURCE_DIR/$patch" | $patch_command ${1+"$@"} ;;
  *.gz) gunzip < "$RPM_SOURCE_DIR/$patch" | $patch_command ${1+"$@"} ;;
  *) $patch_command ${1+"$@"} < "$RPM_SOURCE_DIR/$patch" ;;
  esac
}

# don't apply patch if it's empty or does not exist
ApplyOptionalPatch()
{
  local patch=$1
  shift
  if [ ! -f $RPM_SOURCE_DIR/$patch ]; then
    return 0
  fi
  local C=$(wc -l $RPM_SOURCE_DIR/$patch | awk '{print $1}')
  if [ "$C" -gt 9 ]; then
    ApplyPatch $patch ${1+"$@"}
  fi
}

ApplyOptionalPatch qemu-kvm-test.patch

# for tscdeadline_latency.flat
%ifarch x86_64
  tar -xf %{SOURCE25}
%endif

%build
buildarch="%{kvm_target}-softmmu"

# --build-id option is used for giving info to the debug packages.
extraldflags="-Wl,--build-id";
buildldflags="VL_LDFLAGS=-Wl,--build-id"

# QEMU already knows how to set _FORTIFY_SOURCE
%global optflags %(echo %{optflags} | sed 's/-Wp,-D_FORTIFY_SOURCE=2//')

%ifarch s390
    # drop -g flag to prevent memory exhaustion by linker
    %global optflags %(echo %{optflags} | sed 's/-g//')
    sed -i.debug 's/"-g $CFLAGS"/"$CFLAGS"/g' configure
%endif

cp %{SOURCE24} build_configure.sh

./build_configure.sh  \
  "%{_prefix}" \
  "%{_libdir}" \
  "%{_sysconfdir}" \
  "%{_localstatedir}" \
  "%{_libexecdir}" \
  "%{qemudocdir}" \
  "%{pkgname}" \
  "%{kvm_target}" \
  "%{name}-%{version}-%{release}" \
  "%{optflags}" \
%if 0%{have_fdt}
  enable \
%else
  disable \
 %endif
%if 0%{have_gluster}
  enable \
%else
  disable \
%endif
  disable \
%ifnarch s390x
  enable \
%else
  disable \
%endif
%if 0%{?ucloud:0}
  enable \
%else
  disable \
%endif
%if 0%{have_librdma}
  enable \
%else
  disable \
%endif
%if 0%{have_seccomp}
  enable \
%else
  disable \
%endif
%if 0%{have_spice}
  enable \
%else
  disable \
%endif
%if 0%{have_usbredir}
  enable \
%else
  disable \
%endif
%if 0%{have_tcmalloc}
  enable \
%else
  disable \
%endif
%if 0%{have_vxhs}
  enable \
%else
  disable \
%endif
%if 0%{have_vtd}
  enable \
%else
  disable \
%endif
%if 0%{have_live_block_ops}
  enable \
%else
  disable \
%endif
%if 0%{have_vhost_user}
  enable \
%else
  disable \
%endif
%if 0%{rhev}
  enable \
%else
  disable \
%endif
  --target-list="$buildarch"

echo "config-host.mak contents:"
echo "==="
cat config-host.mak
echo "==="

make V=1 %{?_smp_mflags} $buildldflags

# Setup back compat qemu-kvm binary
./scripts/tracetool.py --backend dtrace --format stap --group=all \
  --binary %{_libexecdir}/qemu-kvm --target-name %{kvm_target} \
  --target-type system --probe-prefix \
  qemu.kvm trace-events-all > qemu-kvm.stp

./scripts/tracetool.py --backend dtrace --format simpletrace-stap \
  --group=all --binary %{_libexecdir}/qemu-kvm --target-name %{kvm_target} \
  --target-type system --probe-prefix \
  qemu.kvm trace-events-all > qemu-kvm-simpletrace.stp

cp -a %{kvm_target}-softmmu/qemu-system-%{kvm_target} qemu-kvm

gcc %{SOURCE6} -O2 -g -o ksmctl

# build tscdeadline_latency.flat
%ifarch x86_64
  (cd  kvm-unit-tests && ./configure)
  make -C kvm-unit-tests
%endif

%install
%define _udevdir %(pkg-config --variable=udevdir udev)/rules.d

%if 0%{?el7}
install -D -p -m 0644 %{SOURCE4} $RPM_BUILD_ROOT%{_unitdir}/ksm.service
install -D -p -m 0644 %{SOURCE7} $RPM_BUILD_ROOT%{_unitdir}/ksmtuned.service
%endif
install -D -p -m 0644 %{SOURCE5} $RPM_BUILD_ROOT%{_sysconfdir}/sysconfig/ksm
install -D -p -m 0755 ksmctl $RPM_BUILD_ROOT%{_libexecdir}/ksmctl

install -D -p -m 0755 %{SOURCE8} $RPM_BUILD_ROOT%{_sbindir}/ksmtuned
install -D -p -m 0644 %{SOURCE9} $RPM_BUILD_ROOT%{_sysconfdir}/ksmtuned.conf
install -D -p -m 0644 %{SOURCE26} $RPM_BUILD_ROOT%{_sysconfdir}/modprobe.d/vhost.conf
%ifarch s390x s390
    install -D -p -m 0644 %{SOURCE30} $RPM_BUILD_ROOT%{_sysconfdir}/modprobe.d/kvm.conf
%else
%ifarch %{ix86} x86_64
    install -D -p -m 0644 %{SOURCE31} $RPM_BUILD_ROOT%{_sysconfdir}/modprobe.d/kvm.conf
%else
    install -D -p -m 0644 %{SOURCE27} $RPM_BUILD_ROOT%{_sysconfdir}/modprobe.d/kvm.conf
%endif
%endif

mkdir -p $RPM_BUILD_ROOT%{_bindir}/
mkdir -p $RPM_BUILD_ROOT%{_udevdir}
mkdir -p $RPM_BUILD_ROOT%{_sysconfdir}/sysconfig/modules

install -m 0755 %{SOURCE34} $RPM_BUILD_ROOT%{_sysconfdir}/sysconfig/modules/kvm.modules
install -m 0755 scripts/kvm/kvm_stat $RPM_BUILD_ROOT%{_bindir}/
mkdir -p ${RPM_BUILD_ROOT}%{_mandir}/man1/
install -m 0644 kvm_stat.1 ${RPM_BUILD_ROOT}%{_mandir}/man1/
install -m 0644 %{SOURCE3} $RPM_BUILD_ROOT%{_udevdir}

mkdir -p $RPM_BUILD_ROOT%{_datadir}/%{pkgname}
install -m 0644 scripts/dump-guest-memory.py \
                $RPM_BUILD_ROOT%{_datadir}/%{pkgname}
%ifarch x86_64
    install -m 0644 kvm-unit-tests/x86/tscdeadline_latency.flat \
                    $RPM_BUILD_ROOT%{_datadir}/%{pkgname}
%endif

make DESTDIR=$RPM_BUILD_ROOT \
    sharedir="%{_datadir}/%{pkgname}" \
    datadir="%{_datadir}/%{pkgname}" \
    install

mkdir -p $RPM_BUILD_ROOT%{_datadir}/systemtap/tapset

# Install compatibility roms
install %{SOURCE14} $RPM_BUILD_ROOT%{_datadir}/%{pkgname}/
install %{SOURCE15} $RPM_BUILD_ROOT%{_datadir}/%{pkgname}/
install %{SOURCE16} $RPM_BUILD_ROOT%{_datadir}/%{pkgname}/
install %{SOURCE17} $RPM_BUILD_ROOT%{_datadir}/%{pkgname}/
install %{SOURCE20} $RPM_BUILD_ROOT%{_datadir}/%{pkgname}/

install -m 0755 qemu-kvm $RPM_BUILD_ROOT%{_libexecdir}/
install -m 0644 qemu-kvm.stp $RPM_BUILD_ROOT%{_datadir}/systemtap/tapset/
install -m 0644 qemu-kvm-simpletrace.stp $RPM_BUILD_ROOT%{_datadir}/systemtap/tapset/

rm $RPM_BUILD_ROOT%{_bindir}/qemu-system-%{kvm_target}
rm $RPM_BUILD_ROOT%{_datadir}/systemtap/tapset/qemu-system-%{kvm_target}.stp
rm $RPM_BUILD_ROOT%{_datadir}/systemtap/tapset/qemu-system-%{kvm_target}-simpletrace.stp

# Install simpletrace
install -m 0755 scripts/simpletrace.py $RPM_BUILD_ROOT%{_datadir}/%{pkgname}/simpletrace.py
mkdir -p $RPM_BUILD_ROOT%{_datadir}/%{pkgname}/tracetool
install -m 0644 -t $RPM_BUILD_ROOT%{_datadir}/%{pkgname}/tracetool scripts/tracetool/*.py
mkdir -p $RPM_BUILD_ROOT%{_datadir}/%{pkgname}/tracetool/backend
install -m 0644 -t $RPM_BUILD_ROOT%{_datadir}/%{pkgname}/tracetool/backend scripts/tracetool/backend/*.py
mkdir -p $RPM_BUILD_ROOT%{_datadir}/%{pkgname}/tracetool/format
install -m 0644 -t $RPM_BUILD_ROOT%{_datadir}/%{pkgname}/tracetool/format scripts/tracetool/format/*.py

mkdir -p $RPM_BUILD_ROOT%{qemudocdir}
install -p -m 0644 -t ${RPM_BUILD_ROOT}%{qemudocdir} Changelog README README.systemtap COPYING COPYING.LIB LICENSE %{SOURCE19} docs/interop/qmp-spec.txt 
chmod -x ${RPM_BUILD_ROOT}%{_mandir}/man1/*
chmod -x ${RPM_BUILD_ROOT}%{_mandir}/man8/*

install -D -p -m 0644 qemu.sasl $RPM_BUILD_ROOT%{_sysconfdir}/sasl2/%{pkgname}.conf

# Provided by package openbios
rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/openbios-ppc
rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/openbios-sparc32
rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/openbios-sparc64
# Provided by package SLOF
rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/slof.bin

# Remove unpackaged files.
rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/palcode-clipper
rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/petalogix*.dtb
rm -f ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/bamboo.dtb
rm -f ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/ppc_rom.bin
rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/s390-zipl.rom
rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/u-boot.e500
rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/qemu_vga.ndrv
rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/skiboot.lid

rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/s390-ccw.img
%ifarch s390x
    # Use the s390-ccw.img that we've just built, not the pre-built one
    install -m 0644 pc-bios/s390-ccw/s390-ccw.img $RPM_BUILD_ROOT%{_datadir}/%{pkgname}/
%else
    rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/s390-netboot.img
%endif

%ifnarch %{power64}
    rm -f ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/spapr-rtas.bin
%endif

%ifnarch x86_64
    rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/acpi-dsdt.aml
    rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/kvmvapic.bin
    rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/linuxboot.bin
    rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/multiboot.bin
%endif

# Remove sparc files
rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/QEMU,tcx.bin
rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/QEMU,cgthree.bin

# Remove ivshmem example programs
rm -rf ${RPM_BUILD_ROOT}%{_bindir}/ivshmem-client
rm -rf ${RPM_BUILD_ROOT}%{_bindir}/ivshmem-server

# Remove efi roms
rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/efi*.rom

# Provided by package ipxe
rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/pxe*rom
# Provided by package vgabios
rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/vgabios*bin
# Provided by package seabios
rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/bios*.bin
# Provided by package sgabios
rm -rf ${RPM_BUILD_ROOT}%{_datadir}/%{pkgname}/sgabios.bin

# the pxe gpxe images will be symlinks to the images on
# /usr/share/ipxe, as QEMU doesn't know how to look
# for other paths, yet.
pxe_link() {
    ln -s ../ipxe/$2.rom %{buildroot}%{_datadir}/%{pkgname}/pxe-$1.rom
}

%ifnarch aarch64 s390x
pxe_link e1000 8086100e
pxe_link ne2k_pci 10ec8029
pxe_link pcnet 10222000
pxe_link rtl8139 10ec8139
pxe_link virtio 1af41000
pxe_link e1000e 808610d3
%endif

rom_link() {
    ln -s $1 %{buildroot}%{_datadir}/%{pkgname}/$2
}

%ifnarch aarch64 s390x
  rom_link ../seavgabios/vgabios-isavga.bin vgabios.bin
  rom_link ../seavgabios/vgabios-cirrus.bin vgabios-cirrus.bin
  rom_link ../seavgabios/vgabios-qxl.bin vgabios-qxl.bin
  rom_link ../seavgabios/vgabios-stdvga.bin vgabios-stdvga.bin
  rom_link ../seavgabios/vgabios-vmware.bin vgabios-vmware.bin
  rom_link ../seavgabios/vgabios-virtio.bin vgabios-virtio.bin
%endif
%ifarch x86_64
  rom_link ../seabios/bios.bin bios.bin
  rom_link ../seabios/bios-256k.bin bios-256k.bin
  rom_link ../sgabios/sgabios.bin sgabios.bin
%endif

%if 0%{have_kvm_setup}
    install -D -p -m 755 %{SOURCE21} $RPM_BUILD_ROOT%{_prefix}/lib/systemd/kvm-setup
	install -D -p -m 644 %{SOURCE22} $RPM_BUILD_ROOT%{_unitdir}/kvm-setup.service
	install -D -p -m 644 %{SOURCE23} $RPM_BUILD_ROOT%{_presetdir}/85-kvm.preset
%endif

%if 0%{have_memlock_limits}
    install -D -p -m 644 %{SOURCE28} $RPM_BUILD_ROOT%{_sysconfdir}/security/limits.d/95-kvm-memlock.conf
%endif

# Install rules to use the bridge helper with libvirt's virbr0
install -D -m 0644 %{SOURCE12} $RPM_BUILD_ROOT%{_sysconfdir}/%{pkgname}/bridge.conf

%if 0%{?el7}
# Install qemu-pr-helper service
install -m 0644 %{_sourcedir}/qemu-pr-helper.service %{buildroot}%{_unitdir}
install -m 0644 %{_sourcedir}/qemu-pr-helper.socket %{buildroot}%{_unitdir}
%endif

%if 0
make %{?_smp_mflags} $buildldflags DESTDIR=$RPM_BUILD_ROOT install-libcacard

find $RPM_BUILD_ROOT -name "libcacard.so*" -exec chmod +x \{\} \;
%endif

find $RPM_BUILD_ROOT -name '*.la' -or -name '*.a' | xargs rm -f

%check
#export DIFF=diff; make check V=1

%post
# load kvm modules now, so we can make sure no reboot is needed.
# If there's already a kvm module installed, we don't mess with it
udevadm control --reload >/dev/null 2>&1 || :
sh %{_sysconfdir}/sysconfig/modules/kvm.modules &> /dev/null || :
    udevadm trigger --subsystem-match=misc --sysname-match=kvm --action=add || :
%if %{have_kvm_setup}
    systemctl daemon-reload # Make sure it sees the new presets and unitfile
    %systemd_post kvm-setup.service
    if systemctl is-enabled kvm-setup.service > /dev/null; then
        systemctl start kvm-setup.service
    fi
%endif

%post -n qemu-kvm-common%{?pkgsuffix}
%if 0%{?el7}
%systemd_post ksm.service
%systemd_post ksmtuned.service
%endif

getent group kvm >/dev/null || groupadd -g 36 -r kvm
getent group qemu >/dev/null || groupadd -g 107 -r qemu
getent passwd qemu >/dev/null || \
useradd -r -u 107 -g qemu -G kvm -d / -s /sbin/nologin \
  -c "qemu user" qemu

%if 0%{?el7}
%preun -n qemu-kvm-common%{?pkgsuffix}
%systemd_preun ksm.service
%systemd_preun ksmtuned.service

%postun -n qemu-kvm-common%{?pkgsuffix}
%systemd_postun_with_restart ksm.service
%systemd_postun_with_restart ksmtuned.service
%endif

%global kvm_files \
%{_udevdir}/80-kvm.rules

%global qemu_kvm_files \
%{_libexecdir}/qemu-kvm \
%{_datadir}/systemtap/tapset/qemu-kvm.stp \
%{_datadir}/%{pkgname}/trace-events-all \
%{_datadir}/systemtap/tapset/qemu-kvm-simpletrace.stp \
%{_datadir}/%{pkgname}/systemtap/script.d/qemu_kvm.stp \
%{_datadir}/%{pkgname}/systemtap/conf.d/qemu_kvm.conf

%files -n qemu-kvm-common%{?pkgsuffix}
%defattr(-,root,root)
%dir %{qemudocdir}
%doc %{qemudocdir}/Changelog
%doc %{qemudocdir}/README
%doc %{qemudocdir}/qemu-doc.html
%doc %{qemudocdir}/COPYING
%doc %{qemudocdir}/COPYING.LIB
%doc %{qemudocdir}/LICENSE
%doc %{qemudocdir}/README.rhel6-gpxe-source
%doc %{qemudocdir}/README.systemtap
%doc %{qemudocdir}/qmp-spec.txt
%doc %{qemudocdir}/qemu-doc.txt
%doc %{qemudocdir}/qemu-qmp-ref.html
%doc %{qemudocdir}/qemu-qmp-ref.txt
%{_mandir}/man7/qemu-qmp-ref.7*
%{_bindir}/qemu-pr-helper

%if 0%{?el7}
%{_unitdir}/qemu-pr-helper.service
%{_unitdir}/qemu-pr-helper.socket
%endif

%dir %{_datadir}/%{pkgname}/
%{_datadir}/%{pkgname}/keymaps/
%{_mandir}/man1/%{pkgname}.1*
%{_mandir}/man7/qemu-block-drivers.7*
%attr(4755, -, -) %{_libexecdir}/qemu-bridge-helper
%config(noreplace) %{_sysconfdir}/sasl2/%{pkgname}.conf
%if 0%{?el7}
%{_unitdir}/ksm.service
%{_unitdir}/ksmtuned.service
%endif
%{_libexecdir}/ksmctl
%config(noreplace) %{_sysconfdir}/sysconfig/ksm
%{_sbindir}/ksmtuned
%config(noreplace) %{_sysconfdir}/ksmtuned.conf
%dir %{_sysconfdir}/%{pkgname}
%config(noreplace) %{_sysconfdir}/%{pkgname}/bridge.conf
%config(noreplace) %{_sysconfdir}/modprobe.d/vhost.conf
%config(noreplace) %{_sysconfdir}/modprobe.d/kvm.conf
%config(noreplace) %{_sysconfdir}/sysconfig/modules/kvm.modules
%{_datadir}/%{pkgname}/simpletrace.py*
%{_datadir}/%{pkgname}/tracetool/*.py*
%{_datadir}/%{pkgname}/tracetool/backend/*.py*
%{_datadir}/%{pkgname}/tracetool/format/*.py*

%files
%defattr(-,root,root)
%ifarch x86_64
    %{_datadir}/%{pkgname}/acpi-dsdt.aml
    %{_datadir}/%{pkgname}/bios.bin
    %{_datadir}/%{pkgname}/bios-256k.bin
    %{_datadir}/%{pkgname}/linuxboot.bin
    %{_datadir}/%{pkgname}/multiboot.bin
    %{_datadir}/%{pkgname}/kvmvapic.bin
    %{_datadir}/%{pkgname}/sgabios.bin
%endif
%ifarch s390x
    %{_datadir}/%{pkgname}/s390-ccw.img
    %{_datadir}/%{pkgname}/s390-netboot.img
%endif
%ifnarch aarch64 s390x
    %{_datadir}/%{pkgname}/vgabios.bin
    %{_datadir}/%{pkgname}/vgabios-cirrus.bin
    %{_datadir}/%{pkgname}/vgabios-qxl.bin
    %{_datadir}/%{pkgname}/vgabios-stdvga.bin
    %{_datadir}/%{pkgname}/vgabios-vmware.bin
    %{_datadir}/%{pkgname}/vgabios-virtio.bin
    %{_datadir}/%{pkgname}/pxe-e1000.rom
    %{_datadir}/%{pkgname}/pxe-e1000e.rom
    %{_datadir}/%{pkgname}/pxe-virtio.rom
    %{_datadir}/%{pkgname}/pxe-pcnet.rom
    %{_datadir}/%{pkgname}/pxe-rtl8139.rom
    %{_datadir}/%{pkgname}/pxe-ne2k_pci.rom
%endif
%{_datadir}/%{pkgname}/qemu-icon.bmp
%{_datadir}/%{pkgname}/qemu_logo_no_text.svg
%{_datadir}/%{pkgname}/rhel6-virtio.rom
%{_datadir}/%{pkgname}/rhel6-pcnet.rom
%{_datadir}/%{pkgname}/rhel6-rtl8139.rom
%{_datadir}/%{pkgname}/rhel6-ne2k_pci.rom
%{_datadir}/%{pkgname}/rhel6-e1000.rom
%{_datadir}/%{pkgname}/linuxboot_dma.bin
%{_datadir}/%{pkgname}/dump-guest-memory.py*
%ifarch %{power64}
    %{_datadir}/%{pkgname}/spapr-rtas.bin
%endif
%{?kvm_files:}
%{?qemu_kvm_files:}
%if 0%{have_kvm_setup}
    %{_prefix}/lib/systemd/kvm-setup
    %{_unitdir}/kvm-setup.service
    %{_presetdir}/85-kvm.preset
%endif
%if 0%{have_memlock_limits}
    %{_sysconfdir}/security/limits.d/95-kvm-memlock.conf
%endif

%files -n qemu-kvm-tools%{?pkgsuffix}
%defattr(-,root,root,-)
%{_bindir}/kvm_stat
%{_mandir}/man1/kvm_stat.1*
%ifarch x86_64
%{_datadir}/%{pkgname}/tscdeadline_latency.flat
%endif

%files -n qemu-img%{?pkgsuffix}
%defattr(-,root,root)
%{_bindir}/qemu-img
%{_bindir}/qemu-io
%{_bindir}/qemu-nbd
%{_mandir}/man1/qemu-img.1*
%{_mandir}/man8/qemu-nbd.8*

%if 0
%files -n libcacard%{?pkgsuffix}
%defattr(-,root,root,-)
%{_libdir}/libcacard.so.*

%files -n libcacard-tools%{?pkgsuffix}
%defattr(-,root,root,-)
%{_bindir}/vscclient

%files -n libcacard-devel%{?pkgsuffix}
%defattr(-,root,root,-)
%{_includedir}/cacard
%{_libdir}/libcacard.so
%{_libdir}/pkgconfig/libcacard.pc
%endif

%changelog
* Mon May 20 2019 Shaun Huang <shaun.huang@ucloud.cn> - 2.10.0-6
- [ucloud] 2.10.0-6

* Sun Apr 28 2019 Bingsong Si <owen.si@ucloud.cn> - 2.10.0-5
- [ucloud] 2.10.0-5

* Mon Mar 18 2019 Bingsong Si <owen.si@ucloud.cn> - 2.10.0-4
- [ucloud] 2.10.0-4

* Mon Mar 04 2019 Bingsong Si <owen.si@ucloud.cn> - 2.10.0-3
- [ucloud] 2.10.0-3

* Fri Jan 25 2019 Bingsong Si <owen.si@ucloud.cn> - 2.10.0-2
- [ucloud] 2.10.0-2

* Tue Dec 04 2018 Bingsong Si <owen.si@ucloud.cn> - 2.10.0-1
- [ucloud] 2.10.0-1

